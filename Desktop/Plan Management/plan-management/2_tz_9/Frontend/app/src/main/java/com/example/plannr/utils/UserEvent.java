package com.example.plannr.utils;

import android.os.Build;

import com.example.plannr.Calendar.CalendarUtils;
//import com.example.plannr.Calendar.EventDescription;

import java.time.LocalDate;
import java.time.LocalTime;


/**
 * class for UserEvent objects (really just event objects), with the given information
 * @author Zach R and Spencer Thiele
 */
public class UserEvent {

    private LocalDate date;
    private LocalTime time;
    private String title;
    private String description;

    public int eventID;

    private long userID;

    private int size = 0;
    private int tag = 0;

    private int frequency = 0;

    private String fuckBackend;

    private int number = 0;

    //mapping
    private String address;

    public UserEvent(String title){
        this.title = title;
    }


    /**
     * constructor for the UserEvents
     * @param title the title of the event
     * @param description the description of the event
     * @param date the date of the event
     * @param time the time of the event
     * @param userID the user ID of the events creator
     */

    public UserEvent(String title, String description, LocalDate date, LocalTime time, long userID){
        this.date = date;
        this.time = time;
        this.title = title;
        this.description = description;
        this.userID = userID;
    }


    public UserEvent(String title, String description, LocalDate date, LocalTime time, long userID, int tag){
        this.date = date;
        this.time = time;
        this.title = title;
        this.description = description;
        this.userID = userID;
        this.tag = tag;
    }


    /**
     * constructor for the UserEvents
     * @param title the title of the event
     * @param description the description of the event
     * @param date the date of the event
     * @param time the time of the event
     * @param userID the user ID of the events creator
     * @param eventID the event ID generated by backend and associated with the event
     */

    public UserEvent(String title, String description, LocalDate date, LocalTime time, long userID, String address, int eventID, int size){
        this.date = date;
        this.time = time;
        this.title = title;
        this.description = description;
        this.userID = userID;
        this.eventID = eventID;
        this.size = size;
        this.address = address;
    }

    public UserEvent(String title, String description, LocalDate date, LocalTime time, long userID, int tag, String address, int eventID, int size){
        this.date = date;
        this.time = time;
        this.title = title;
        this.description = description;
        this.userID = userID;
        this.tag = tag;
        this.address = address;
    }
    public UserEvent(String title, String description, LocalDate date, LocalTime time, long userID, int tag, int occur, int number, String address){
        this.date = date;
        this.time = time;
        this.title = title;
        this.description = description;
        this.userID = userID;
        this.tag = tag;
        this.frequency = occur;
        this.number = number;
        this.address = address;
    }

    public UserEvent(String title, String description, LocalDate date, LocalTime time, long userID, int tag, String occur, int number, String address, int eventID, int size){
        this.date = date;
        this.time = time;
        this.title = title;
        this.description = description;
        this.userID = userID;
        this.eventID = eventID;
        this.size = size;
        if(occur.equals("NONE")){
            this.frequency = 0;
        }else if(occur.equals("DAILY")){
            this.frequency = 1;
        }else if(occur.equals("WEEKLY")){
            this.frequency = 2;
        }else{
            this.frequency = 3;
        }
        //this.frequency = occur;
        this.number = number;
        this.address = address;
        this.tag = tag;
    }

    public UserEvent(String title, String description, LocalDate date, LocalTime time, long userID, int tag, String occur, int number, String address, int eventID){
        this.date = date;
        this.time = time;
        this.title = title;
        this.description = description;
        this.userID = userID;
        this.eventID = eventID;
        this.size = size;
        if(occur.equals("NONE")){
            this.frequency = 0;
        }else if(occur.equals("DAILY")){
            this.frequency = 1;
        }else if(occur.equals("WEEKLY")){
            this.frequency = 2;
        }else{
            this.frequency = 3;
        }
        //this.frequency = occur;
        this.number = number;
        this.address = address;
        this.tag = tag;
    }

//    public UserEvent(String title, String description, LocalDate date, LocalTime time, long userID, int tag, int occur, int number, String address, int eventID, int size){
//        this.date = date;
//        this.time = time;
//        this.title = title;
//        this.description = description;
//        this.userID = userID;
//        this.eventID = eventID;
//        this.size = size;
//        this.frequency = occur;
//        this.number = number;
//        this.address = address;
//        this.tag = tag;
//    }

    /**
     * method that determines if an event has already occurred based on the current date
     * @return returns a boolean true if the date is past, false otherwise
     */
    public boolean isPast(){
        boolean value = false;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            if(date.isBefore(LocalDate.now())){
                value = true;
            } else if(date.equals(LocalDate.now()) && time.isBefore(LocalTime.now())){
                value = true;
            }
        }
        return value;
    }

    /**
     * method that determine whether an event comes before another event (compares 2 events)
     * @param event event to compare this event with
     * @return returns an int value 1 is this event is before the other event, 0 is they are at the
     * same time, and -1 if it is after
     */

    public int isEarlier(UserEvent event){
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            if(this.date.isBefore(event.date)){
                return 1;
            }else if(this.date.isAfter(event.date)){
                return -1;
            }else if(this.time.isBefore(event.time)){
                return 1;
            }else if(this.time.isAfter(event.time)){
                return -1;
            }else{
                return 0;
            }
        }
        return 0;
    }

    /**
     * method that determines whether an event's date is today
     */
    public boolean isToday(){
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            return date.equals(LocalDate.now());
        }
        return false;
    }

    /**
     * method that returns teh events title
     * @return the events title
     */
    public String GetTitle()
    {
        return title;
    }

    /**
     * method that returns teh date of the event in LocalDate form
     * @return returns teh LocalDate of the event
     */

    public LocalDate getDateR() {
        return date;
    }

    /**
     * method that returns the time of the event in LocalTime form
     * @return returns the LocalTime of the event
     */
    public LocalTime getTimeR() {
        return time;
    }

    /**
     * method that returns the time of the event in LocalTime form
     * @return returns the LocalTime of the event
     */
    public LocalTime getTime(){
        return time;
    }

    /**
     * method that returns the date of the event in formatted form with a colon
     * @return returns the formatted date of the event
     */
    public String GetDate()
    {
        return "Date: " + CalendarUtils.formattedDate(date);
    }

    /**
     * method that returns the date of the event in formatted form without a colon
     * @return returns the formatted date of the event
     */
    public String GetDateNoColon()
    {
        return "Date " + CalendarUtils.formattedDate(date);
    }

    /**
     * method that returns the time of the event in formatted form with a colon
     * @return returns the formatted time of the event
     */
    public String GetTime(){
        return "Time: " + CalendarUtils.formattedTime(time);
    }

    /**
     * method that gets the description of the event
     * @return returns a string of the events description
     */
    public String GetDescription()
    {
        return description;
    }


    public void setDescription(String description){
        this.description = description;
    }

    public void setTime(LocalTime time){
        this.time = time;
    }

    public void setDate(LocalDate date){
        this.date = date;
    }


    /**
     * method that returns the ID of the events creator
     * @return id of the events creator
     */
    public long getUserID(){
        return userID;
    }

    /**
     * method that returns the ID of the event
     * @return id of the event
     */
    public int getEventID(){
        return eventID;
    }

    public int getTag(){
        return tag;
    }

    public void setTag(int tag){
        this.tag = tag;
    }

    public int getFrequency(){
        return frequency;
    }

    public int getRepetitions(){
        return number;
    }

    public String getAddress(){
        return address;
    }

    public void setAddress(String address){
        this.address = address;
    }

    public int getSize(){
        return size;
    }

}
